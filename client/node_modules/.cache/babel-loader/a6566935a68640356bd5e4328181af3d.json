{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useHttp } from \"./http.hook\";\nexport const useBalance = () => {\n  _s();\n\n  const [balance, setBalance] = useState(0);\n  const {\n    request\n  } = useHttp();\n  const [currency, setCurrency] = useState(\"USD\");\n  const changeBalance = useCallback(value => {\n    const options = {\n      minimumFractionDigits: 2\n    };\n    const result = new Intl.NumberFormat('pt-BR', options).format(parseFloat(value.replace(',', '').replace(/\\D/g, '')) / 100);\n    setBalance(result.split('.').join(''));\n  }, [setBalance]);\n  const convertCurrency = useCallback(async (to, from, amount) => {\n    try {\n      const data = await request(`/api/currency/convert?from=${from}&to=${to}&amount=${amount}`, 'GET');\n      return data.result.toString().replace('.', ',');\n    } catch (err) {\n      console.log(err);\n    }\n  }, [request]);\n  const changeCurrency = useCallback(async event => {\n    const currency = event.target.id; // setCurrency(currency)\n\n    const balanceInput = document.getElementById('balance');\n\n    if (balanceInput.value) {\n      let changedCurrency = await convertCurrency('ILS', 'USD', balanceInput.value.replace(',', '.'));\n\n      switch (currency) {\n        case 'ILS':\n          balanceInput.value = changedCurrency + ' ILS';\n          break;\n\n        case 'USD':\n          changedCurrency = await convertCurrency('USD', 'ILS', balanceInput.value.replace(',', '.'));\n          balanceInput.value = changedCurrency + ' USD';\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, [convertCurrency]);\n  return {\n    balance,\n    changeBalance,\n    currency,\n    changeCurrency\n  };\n};\n\n_s(useBalance, \"6ymeLbwlcsL2FXxWdRaMDZbWOiM=\", false, function () {\n  return [useHttp];\n});","map":{"version":3,"names":["useCallback","useEffect","useState","useHttp","useBalance","balance","setBalance","request","currency","setCurrency","changeBalance","value","options","minimumFractionDigits","result","Intl","NumberFormat","format","parseFloat","replace","split","join","convertCurrency","to","from","amount","data","toString","err","console","log","changeCurrency","event","target","id","balanceInput","document","getElementById","changedCurrency"],"sources":["C:/OnlineBanking/mern-project/client/src/hooks/balance.hook.js"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\"\r\nimport { useHttp } from \"./http.hook\"\r\n\r\n\r\n\r\nexport const useBalance = () => {\r\n    const [balance, setBalance] = useState(0)\r\n    const { request } = useHttp()\r\n    const [ currency, setCurrency ] = useState(\"USD\")\r\n\r\n\r\n    const changeBalance = useCallback(value => {\r\n        const options = { minimumFractionDigits: 2 }\r\n        const result = new Intl.NumberFormat('pt-BR', options).format(\r\n        parseFloat(value.replace(',', '').replace(/\\D/g, '')) / 100)\r\n        setBalance(result.split('.').join(''))\r\n    }, [setBalance])\r\n    \r\n    const convertCurrency = useCallback(async (to, from, amount) => {\r\n        try {\r\n            const data = await request(`/api/currency/convert?from=${from}&to=${to}&amount=${amount}`, 'GET')\r\n            return data.result.toString().replace('.', ',')\r\n        } catch (err) {\r\n            console.log(err)    \r\n        }   \r\n    }, [request])\r\n    \r\n    const changeCurrency = useCallback(async event => {\r\n        const currency = event.target.id\r\n        // setCurrency(currency)\r\n        const balanceInput = document.getElementById('balance')\r\n        if (balanceInput.value){\r\n            let changedCurrency = await convertCurrency('ILS', 'USD', balanceInput.value.replace(',','.')) \r\n            switch (currency){\r\n                case 'ILS':\r\n                    balanceInput.value = changedCurrency + ' ILS'\r\n                    break\r\n                case 'USD':\r\n                    changedCurrency = await convertCurrency('USD', 'ILS', balanceInput.value.replace(',','.'))\r\n                    balanceInput.value = changedCurrency + ' USD'\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n    }, [convertCurrency])\r\n    return { balance, changeBalance, currency, changeCurrency }\r\n}\r\n\r\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,OAAT,QAAwB,aAAxB;AAIA,OAAO,MAAMC,UAAU,GAAG,MAAM;EAAA;;EAC5B,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,CAAD,CAAtC;EACA,MAAM;IAAEK;EAAF,IAAcJ,OAAO,EAA3B;EACA,MAAM,CAAEK,QAAF,EAAYC,WAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;EAGA,MAAMQ,aAAa,GAAGV,WAAW,CAACW,KAAK,IAAI;IACvC,MAAMC,OAAO,GAAG;MAAEC,qBAAqB,EAAE;IAAzB,CAAhB;IACA,MAAMC,MAAM,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+BJ,OAA/B,EAAwCK,MAAxC,CACfC,UAAU,CAACP,KAAK,CAACQ,OAAN,CAAc,GAAd,EAAmB,EAAnB,EAAuBA,OAAvB,CAA+B,KAA/B,EAAsC,EAAtC,CAAD,CAAV,GAAwD,GADzC,CAAf;IAEAb,UAAU,CAACQ,MAAM,CAACM,KAAP,CAAa,GAAb,EAAkBC,IAAlB,CAAuB,EAAvB,CAAD,CAAV;EACH,CALgC,EAK9B,CAACf,UAAD,CAL8B,CAAjC;EAOA,MAAMgB,eAAe,GAAGtB,WAAW,CAAC,OAAOuB,EAAP,EAAWC,IAAX,EAAiBC,MAAjB,KAA4B;IAC5D,IAAI;MACA,MAAMC,IAAI,GAAG,MAAMnB,OAAO,CAAE,8BAA6BiB,IAAK,OAAMD,EAAG,WAAUE,MAAO,EAA9D,EAAiE,KAAjE,CAA1B;MACA,OAAOC,IAAI,CAACZ,MAAL,CAAYa,QAAZ,GAAuBR,OAAvB,CAA+B,GAA/B,EAAoC,GAApC,CAAP;IACH,CAHD,CAGE,OAAOS,GAAP,EAAY;MACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ;IACH;EACJ,CAPkC,EAOhC,CAACrB,OAAD,CAPgC,CAAnC;EASA,MAAMwB,cAAc,GAAG/B,WAAW,CAAC,MAAMgC,KAAN,IAAe;IAC9C,MAAMxB,QAAQ,GAAGwB,KAAK,CAACC,MAAN,CAAaC,EAA9B,CAD8C,CAE9C;;IACA,MAAMC,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAArB;;IACA,IAAIF,YAAY,CAACxB,KAAjB,EAAuB;MACnB,IAAI2B,eAAe,GAAG,MAAMhB,eAAe,CAAC,KAAD,EAAQ,KAAR,EAAea,YAAY,CAACxB,KAAb,CAAmBQ,OAAnB,CAA2B,GAA3B,EAA+B,GAA/B,CAAf,CAA3C;;MACA,QAAQX,QAAR;QACI,KAAK,KAAL;UACI2B,YAAY,CAACxB,KAAb,GAAqB2B,eAAe,GAAG,MAAvC;UACA;;QACJ,KAAK,KAAL;UACIA,eAAe,GAAG,MAAMhB,eAAe,CAAC,KAAD,EAAQ,KAAR,EAAea,YAAY,CAACxB,KAAb,CAAmBQ,OAAnB,CAA2B,GAA3B,EAA+B,GAA/B,CAAf,CAAvC;UACAgB,YAAY,CAACxB,KAAb,GAAqB2B,eAAe,GAAG,MAAvC;UACA;;QACJ;UACI;MATR;IAWH;EACJ,CAlBiC,EAkB/B,CAAChB,eAAD,CAlB+B,CAAlC;EAmBA,OAAO;IAAEjB,OAAF;IAAWK,aAAX;IAA0BF,QAA1B;IAAoCuB;EAApC,CAAP;AACH,CA1CM;;GAAM3B,U;UAEWD,O"},"metadata":{},"sourceType":"module"}